augment(gravier_tidy) |>
ggplot(mapping = aes(x = .fittedPC1,
y = .fittedPC2,
colour = y)) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_point() +
stat_ellipse() +
theme_minimal() +
labs(x = scree_data |> filter(PC == 1) |> pull(label),
y = scree_data |> filter(PC == 2) |> pull(label))
pca_data |> augment(gravier_tidy)
golub |> pull(x) |> as_tibble()
golub |> map(x) |> as_tibble()
golub |> map("x") |> as_tibble()
golub$x |> as_tibble()
gravier_tidy
#| echo: true
#| message: false
#|
download.file("https://github.com/ramhiser/datamicroarray/raw/master/data/gravier.RData",
destfile = "data/gravier.RData")
download.file(url = "https://github.com/ramhiser/datamicroarray/raw/refs/heads/master/data/golub.RData",
destfile = "data/golub.RData")
load("data/gravier.RData")
load("data/golub.RData")
library("tidyverse")
library("broom")
gravier_tidy <- golub |>
bind_cols() |>
as_tibble() |>
relocate(y)
pca_data <- gravier_tidy |>
select(-y) |>
prcomp(center = TRUE, scale. = TRUE)
scree_data <- pca_data |>
tidy(matrix = "eigenvalues") |>
mutate(label = str_c("PC", PC, " (", round(percent*100, 1), "%)"))
pca_data |>
augment(gravier_tidy) |>
ggplot(mapping = aes(x = .fittedPC1,
y = .fittedPC2,
colour = y)) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_point() +
stat_ellipse() +
theme_minimal() +
labs(x = scree_data |> filter(PC == 1) |> pull(label),
y = scree_data |> filter(PC == 2) |> pull(label))
gravier_tidy
dim(golub$x)
as_tibble(golub$x)
golub |> map(1)
golub |> map()
golub
golub |> str()
golub |> names()
golub |> map("x")
golub |> as_tibble()
golub |> as_tibble() |> unnest()
golub |> as_tibble() |> unnest(cols = c())
golub
golub |> select(x)
golub |> as_tibble() |> pull(x)
golub |> pluck(x)
golub |> pluck("x")
golub |> pluck("x") |> as_tibble()
golub |> pluck("x") |> as_tibble() |> mutate(y = pluck(golub, "y")) |> relocate(y)
#| echo: true
#| message: false
#|
download.file("https://github.com/ramhiser/datamicroarray/raw/master/data/gravier.RData",
destfile = "data/gravier.RData")
download.file(url = "https://github.com/ramhiser/datamicroarray/raw/refs/heads/master/data/golub.RData",
destfile = "data/golub.RData")
load("data/gravier.RData")
load("data/golub.RData")
library("tidyverse")
library("broom")
golub_tidy <- golub |>
pluck("x") |>
as_tibble() |>
mutate(y = pluck(golub, "y")) |>
relocate(y)
pca_data <- golub_tidy |>
select(-y) |>
prcomp(center = TRUE, scale. = TRUE)
scree_data <- pca_data |>
tidy(matrix = "eigenvalues") |>
mutate(label = str_c("PC", PC, " (", round(percent*100, 1), "%)"))
pca_data |>
augment(golub_tidy) |>
ggplot(mapping = aes(x = .fittedPC1,
y = .fittedPC2,
colour = y)) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_point() +
stat_ellipse() +
theme_minimal() +
labs(x = scree_data |> filter(PC == 1) |> pull(label),
y = scree_data |> filter(PC == 2) |> pull(label))
pca_scores <- augment(pca_res, golub_tidy) |>
select(.fittedPC1, .fittedPC2, .fittedPC3, y)
pca_scores <- augment(pca_data, golub_tidy) |>
select(.fittedPC1, .fittedPC2, .fittedPC3, y)
library(plotly)
plot_ly(pca_scores,
x = ~.fittedPC1,
y = ~.fittedPC2,
z = ~.fittedPC3,
color = ~y,
colors = c("ALL" = "#1b9e77", "AML" = "#d95f02"),
type = "scatter3d",
mode = "markers") |>
layout(scene = list(
xaxis = list(title = "PC1"),
yaxis = list(title = "PC2"),
zaxis = list(title = "PC3")
))
pca_data |>
augment(golub_tidy) |>
ggplot(mapping = aes(x = .fittedPC1,
y = .fittedPC2,
colour = y)) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_point() +
stat_ellipse() +
scale_color_manual(values = c("ALL" = "#1b9e77", "AML" = "#d95f02")) +
theme_minimal() +
labs(x = scree_data |> filter(PC == 1) |> pull(label),
y = scree_data |> filter(PC == 2) |> pull(label))
pca_data |>
augment(golub_tidy) |>
ggplot(mapping = aes(x = .fittedPC1,
y = .fittedPC2,
colour = y)) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_point() +
stat_ellipse() +
scale_color_manual(values = c("ALL" = "#0072B2", "AML" = "#D55E00")) +
theme_minimal() +
labs(x = scree_data |> filter(PC == 1) |> pull(label),
y = scree_data |> filter(PC == 2) |> pull(label))
scree_data
golub_tidy
pca_data |> augment(golub_tidy)
scree_data
scree_data |>
ggplot(aes(x = PC, y = percent)) +
geom_col()
scree_data |>
ggplot(aes(x = PC, y = percent)) +
geom_col() +
theme_minimal()
scree_data |>
ggplot(aes(x = PC, y = percent)) +
geom_col() +
geom_vline(xintercept = 0) +
theme_minimal()
scree_data |>
ggplot(aes(x = PC, y = percent)) +
geom_col() +
geom_hline(yintercept = 0) +
theme_minimal()
scree_data
scree_data |>
ggplot(aes(x = PC,
y = percent)) +
geom_col() +
geom_point(aes(y = cumulative)) +
geom_hline(yintercept = 0) +
theme_minimal()
scree_data |>
ggplot(aes(x = PC,
y = percent)) +
geom_col() +
geom_hline(yintercept = 0) +
theme_minimal()
scree_data |>
ggplot(aes(x = PC,
y = percent)) +
geom_col(colour = "black") +
geom_hline(yintercept = 0) +
theme_minimal()
scree_data |>
ggplot(aes(x = PC,
y = percent)) +
geom_col(colour = "black", alpha = 0.5) +
geom_hline(yintercept = 0) +
theme_minimal()
my_pca <- my_data |>
select(-y_true) |>
prcomp()
source("~/.active-rstudio-document")
my_pca |>
augment(my_data) |>
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = factor(y_true))) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
stat_ellipse() +
geom_point() +
theme_minimal()
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
output_model
hidden_df
source("~/.active-rstudio-document")
h1_model
h2_model
h1_out
h2_out
all(h1_out==h2_out)
hidden_df
output_model
y_hat
source("~/.active-rstudio-document")
pred_class
mean(pred_class == data$y_hat)
mean(pred_class == my_data$y_hat)
source("~/.active-rstudio-document")
mean(pred_class == my_data$y_hat)
source("~/.active-rstudio-document")
mean(pred_class == y_hat)
y_hat
pred_class
pred_class == y_hat
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
mean(pred_class == y_hat)
# Evaluate accuracy
pred_class <- ifelse(y_hat < 0.5, 1, 0)
mean(pred_class == y_hat)
source("~/.active-rstudio-document")
h1_model
h2_model
all(h1_out == h2_out)
mean(pred_class == my_data$y_true)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
my_pca_aug <- my_pca |>
augment(my_data)
my_pca_aug |>
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = factor(y_true))) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
stat_ellipse() +
geom_point() +
theme_minimal()
my_pca_aug |>
mutate(y_hat = y_hat)
my_pca_aug |>
mutate(y_hat = y_hat) |>
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = factor(y_true))) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
stat_ellipse() +
geom_point() +
theme_minimal()
my_pca_aug |>
mutate(y_hat = y_hat) |>
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = factor(y_hat))) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
stat_ellipse() +
geom_point() +
theme_minimal()
my_pca_aug |>
mutate(y_hat = y_hat) |>
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = factor(pred_class))) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
stat_ellipse() +
geom_point() +
theme_minimal()
library("patchwork")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
my_pca_aug |>
mutate(y_hat = y_hat)
source("~/.active-rstudio-document")
my_pca_aug |> ggplot(aes(x = y_true, y = y_hat)) + geom_boxplot()
my_pca_aug |> ggplot(aes(x = y_true, y = y_hat, group = y_true)) + geom_boxplot()
source("~/.active-rstudio-document")
my_data
# Base line
base_model <- glm(y_true ~ i1 + i2 + i3, data = my_data, family = binomial(link = "logit"))
base_preds <- predict(h1_model, type = "response")  # sigmoid activation
base_preds
# Base line
base_model <- glm(y_true ~ i1 + i2 + i3, data = my_data, family = binomial(link = "logit"))
base_preds <- predict(h1_model, type = "response")
base_pred_class <- ifelse(base_preds > 0.5, 1, 0)
print(mean(base_pred_class == my_data$y_true))
my_data |> count(y_true)
my_data <- tibble(
i1 = rnorm(n = n),
i2 = rnorm(n = n),
i3 = rnorm(n = n),
y_true = ifelse(2^i1 + sin(i2) - 0.5 * i3 > 0.5, 1, 0)
#y_true = ifelse(i1^2 + sin(i2) - 0.5 * i3 > 0.5, 1, 0)
)
# Create example data -----------------------------------------------------
set.seed(424641)
n <- 500
my_data <- tibble(
i1 = rnorm(n = n),
i2 = rnorm(n = n),
i3 = rnorm(n = n),
y_true = ifelse(2^i1 + sin(i2) - 0.5 * i3 > 0.5, 1, 0)
#y_true = ifelse(i1^2 + sin(i2) - 0.5 * i3 > 0.5, 1, 0)
)
my_data |> count(y_true)
# Create example data -----------------------------------------------------
set.seed(424641)
n <- 500
my_data <- tibble(
i1 = rnorm(n = n),
i2 = rnorm(n = n),
i3 = rnorm(n = n),
y_true = ifelse(2^i1 + sin(i2) - 0.5 * i3 > 0.4, 1, 0)
#y_true = ifelse(i1^2 + sin(i2) - 0.5 * i3 > 0.5, 1, 0)
)
my_data |> count(y_true)
my_data <- tibble(
i1 = rnorm(n = n),
i2 = rnorm(n = n),
i3 = rnorm(n = n),
y_true = ifelse(2^i1 + sin(i2) - 0.5 * i3 > 0.6, 1, 0)
#y_true = ifelse(i1^2 + sin(i2) - 0.5 * i3 > 0.5, 1, 0)
)
# Create example data -----------------------------------------------------
set.seed(424641)
n <- 500
my_data <- tibble(
i1 = rnorm(n = n),
i2 = rnorm(n = n),
i3 = rnorm(n = n),
y_true = ifelse(2^i1 + sin(i2) - 0.5 * i3 > 0.6, 1, 0)
#y_true = ifelse(i1^2 + sin(i2) - 0.5 * i3 > 0.5, 1, 0)
)
my_data |> count(y_true)
# Create example data -----------------------------------------------------
set.seed(424641)
n <- 500
my_data <- tibble(
i1 = rnorm(n = n),
i2 = rnorm(n = n),
i3 = rnorm(n = n),
y_true = ifelse(2^i1 + sin(i2) - 0.5 * i3 > 0.75, 1, 0)
#y_true = ifelse(i1^2 + sin(i2) - 0.5 * i3 > 0.5, 1, 0)
)
my_data |> count(y_true)
# Create example data -----------------------------------------------------
set.seed(424641)
n <- 500
my_data <- tibble(
i1 = rnorm(n = n),
i2 = rnorm(n = n),
i3 = rnorm(n = n),
y_true = ifelse(2^i1 + sin(i2) - 0.5 * i3 > 1, 1, 0)
#y_true = ifelse(i1^2 + sin(i2) - 0.5 * i3 > 0.5, 1, 0)
)
my_data |> count(y_true)
# Create example data -----------------------------------------------------
set.seed(424641)
n <- 500
my_data <- tibble(
i1 = rnorm(n = n),
i2 = rnorm(n = n),
i3 = rnorm(n = n),
y_true = ifelse(2^i1 + sin(i2) - 0.5 * i3 > 1.2, 1, 0)
#y_true = ifelse(i1^2 + sin(i2) - 0.5 * i3 > 0.5, 1, 0)
)
my_data |> count(y_true)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
my_data |> count(y_true)
source("~/.active-rstudio-document")
# Create ensemble of simple models ----------------------------------------
i1_model <- glm(y_true ~ i1, data = my_data, family = binomial(link = "logit"))
i1_model_pred_class <- ifelse(predict(i1_model, type = "response") > 0.5, 1, 0)
print(mean(i1_model_pred_class == my_data$y_true))
i1_model <- glm(y_true ~ i1, data = my_data, family = binomial(link = "logit"))
i1_model_pred_class <- ifelse(predict(i1_model, type = "response") > 0.5, 1, 0)
print(mean(i1_model_pred_class == my_data$y_true))
i2_model <- glm(y_true ~ i2, data = my_data, family = binomial(link = "logit"))
i2_model_pred_class <- ifelse(predict(i2_model, type = "response") > 0.5, 1, 0)
print(mean(i2_model_pred_class == my_data$y_true))
i3_model <- glm(y_true ~ i3, data = my_data, family = binomial(link = "logit"))
i3_model_pred_class <- ifelse(predict(i3_model, type = "response") > 0.5, 1, 0)
print(mean(i3_model_pred_class == my_data$y_true))
base_model <- glm(y_true ~ i1 + i2 + i3, data = my_data, family = binomial(link = "logit"))
base_preds <- predict(base_model, type = "response")
base_pred_class <- ifelse(base_preds > 0.5, 1, 0)
print(mean(base_pred_class == my_data$y_true))
predict(i1_model, type = "response")
i1_model <- glm(y_true ~ i1, data = my_data, family = binomial(link = "logit"))
i1_model_y_hat <- predict(i1_model, type = "response")
i1_model_pred_class <- ifelse(i1_model_y_hat > 0.5, 1, 0)
print(mean(i1_model_pred_class == my_data$y_true))
i2_model <- glm(y_true ~ i2, data = my_data, family = binomial(link = "logit"))
i2_model_y_hat <- predict(i3_model, type = "response")
i2_model_pred_class <- ifelse(i2_model_y_hat > 0.5, 1, 0)
print(mean(i2_model_pred_class == my_data$y_true))
i3_model <- glm(y_true ~ i3, data = my_data, family = binomial(link = "logit"))
i3_model_y_hat <- predict(i3_model, type = "response")
i3_model_pred_class <- ifelse(i3_model_y_hat > 0.5, 1, 0)
print(mean(i3_model_pred_class == my_data$y_true))
i1_model <- glm(y_true ~ i1, data = my_data, family = binomial(link = "logit"))
i1_model_y_hat <- predict(i1_model, type = "response")
i1_model_pred_class <- ifelse(i1_model_y_hat > 0.5, 1, 0)
print(mean(i1_model_pred_class == my_data$y_true))
i2_model <- glm(y_true ~ i2, data = my_data, family = binomial(link = "logit"))
i2_model_y_hat <- predict(i2_model, type = "response")
i2_model_pred_class <- ifelse(i2_model_y_hat > 0.5, 1, 0)
print(mean(i2_model_pred_class == my_data$y_true))
i3_model <- glm(y_true ~ i3, data = my_data, family = binomial(link = "logit"))
i3_model_y_hat <- predict(i3_model, type = "response")
i3_model_pred_class <- ifelse(i3_model_y_hat > 0.5, 1, 0)
print(mean(i3_model_pred_class == my_data$y_true))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
cat("Baseline accuracy = ", mean(base_pred_class == my_data$y_true), "\n")
cat("i1 component accuracy = ", mean(i1_model_pred_class == my_data$y_true), "\n")
cat("i2 component accuracy = ", mean(i2_model_pred_class == my_data$y_true), "\n")
cat("i3 component accuracy = ", mean(i3_model_pred_class == my_data$y_true), "\n")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
two_component_interaction_ensemble_data
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
two_component_interaction_poly_ensemble_model_y_hat
two_component_interaction_poly_ensemble_model_y_hat |> round(1)
install.packages("pROC")
library(pROC)
roc_object <- roc()
roc_object <- roc(rnorm(100), sample(c(0,1),100,T))
roc_object <- roc(sample(c(0,1),100,T), rnorm(100))
auc(roc_object)
auc(roc(sample(c(0,1),100,T), rnorm(100)))
?roc
auc(roc(sample(c(0,1),100,T), rnorm(100), control = 0, case = 1))
roc(sample(c(0,1),100,T), rnorm(100), levels = c(control = 0, case = 1))
roc(sample(c(0,1),100,T), rnorm(100), levels = c(control = 0, case = 1))
roc.default(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1))
roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1))
roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = "case > control")
roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">")
roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">")
roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">")
roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">")
roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">")
roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">")
auc(roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">"))
auc(roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">"))
auc(roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">"))
sapply(1:100, auc(roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">")))
for(i in 1:100 ) auc(roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">")))
for(i in 1:100 ) auc(roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">"))
n <- 1000; out <- rep(NA,n); for(i in 1:n ) out[i] <- auc(roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">"))
out
max(out)
min(out)
plot(density(out))
mean(out)
sd(out)
n <- 1000;
out <- rep(NA,n);for(i in 1:n ) out[i] <- auc(roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">"))
n <- 1000; out <- rep(NA,n); for(i in 1:n ) out[i] <- auc(roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">"))
n <- 1000; out <- rep(NA,n); for(i in 1:n ) out[i] <- auc(roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">")); plot(density(out))
n <- 1000; out <- rep(NA,n); for(i in 1:n ) out[i] <- auc(roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">")); plot(density(out))
mean(out)
sd(out)
n <- 10000; out <- rep(NA,n); for(i in 1:n ) out[i] <- auc(roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">")); plot(density(out))
mean(out)
sd(out)
n <- 100000; out <- rep(NA,n); for(i in 1:n ) out[i] <- auc(roc(response = sample(c(0,1),100,T), predictor = rnorm(100), levels = c(control = 0, case = 1), direction = ">")); plot(density(out))
mean(out)
sd(out)
